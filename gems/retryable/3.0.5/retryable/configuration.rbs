module Retryable
  # Used to set up and modify settings for the retryable.
  class Configuration
    type option_key = :contexts
                    | :ensure
                    | :exception_cb
                    | :log_method
                    | :matching
                    | :not
                    | :on
                    | :sleep
                    | :sleep_method
                    | :tries

    type options = {
      contexts: Hash[Symbol, options],
      ensure: ^(Integer) -> void,
      exception_cb: ^(Exception) -> void,
      log_method: ^(Integer, Exception) -> void,
      matching: (String | Regexp) | Array[String | Regexp],
      not: _Exception | Array[_Exception],
      on: _Exception | Array[_Exception],
      sleep: real | (^(real) -> void),
      sleep_method: ^(real) -> void,
      tries: Integer
    }

    VALID_OPTION_KEYS: Array[option_key]

    attr_accessor contexts: Hash[Symbol, options]
    attr_accessor ensure: ^(Integer) -> void
    attr_accessor exception_cb: ^(Exception) -> void
    attr_accessor log_method: ^(Integer, Exception) -> void
    attr_accessor matching: (String | Regexp) | Array[String | Regexp]
    attr_accessor not: _Exception | Array[_Exception]
    attr_accessor on: _Exception | Array[_Exception]
    attr_accessor sleep: real | (^(real) -> void)
    attr_accessor sleep_method: ^(real) -> void
    attr_accessor tries: Integer

    attr_accessor enabled: bool

    def initialize: () -> void

    def enable: () -> void

    alias enabled? enabled

    def disable: () -> void

    # Allows config options to be read like a hash
    #
    # @param [Symbol] option Key for a given attribute
    def []: (option_key option) -> untyped

    # Returns a hash of all configurable options
    def to_hash: () -> options

    # Returns a hash of all configurable options merged with +hash+
    #
    # @param [Hash] hash A set of configuration options that will take precedence over the defaults
    def merge: (options hash) -> options
  end
end
